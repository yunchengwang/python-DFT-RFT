{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pickle\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Relevant feature test\n",
    "\n",
    "def plot_mos_density(features, dim, mos, bins=32, metric='mse'):\n",
    "    density_map = np.zeros((100, bins))\n",
    "    mos = np.floor(mos).astype(int)\n",
    "    f_1d = features[:, dim]\n",
    "    f_1d, mos = remove_outliers(f_1d, mos)\n",
    "    f_min, f_max = f_1d.min(), f_1d.max()\n",
    "    bin_width = (f_max - f_min) / bins\n",
    "    for i in range(len(mos)):\n",
    "        density_map[mos[i], np.floor((f_1d[i] - f_min - 0.0001)/bin_width).astype(int)] += 1\n",
    "        \n",
    "    best_error, best_partition_index, l_mean, r_mean = find_best_partition(f_1d, mos, bins, metric=metric)\n",
    "    plt.figure()\n",
    "    plt.axvline(x=best_partition_index, color='red', label='partition point')\n",
    "    plt.axhline(y=l_mean, xmin=0, xmax=best_partition_index/bins, color='yellow', label='left mean')\n",
    "    plt.axhline(y=r_mean, xmin=best_partition_index/bins, xmax=1, color='white', label='right mean')\n",
    "    plt.legend()\n",
    "    plt.imshow(density_map)\n",
    "\n",
    "\n",
    "def find_best_partition(f_1d, mos, bins=32, metric='mse'):\n",
    "    f_1d, mos = remove_outliers(f_1d, mos)\n",
    "    best_error = float('inf')\n",
    "    best_partition_index = 0\n",
    "    left_mean, right_mean = 0, 0\n",
    "    f_min, f_max = f_1d.min(), f_1d.max()\n",
    "    bin_width = (f_max - f_min) / bins\n",
    "    for i in range(1, bins):\n",
    "        partition_point = f_min + i * bin_width\n",
    "        left_mos, right_mos = mos[f_1d <= partition_point], mos[f_1d > partition_point]\n",
    "        partition_error = get_partition_error(left_mos, right_mos, metric)\n",
    "        if partition_error < best_error:\n",
    "            best_error = partition_error\n",
    "            best_partition_index = i\n",
    "            left_mean = left_mos.mean()\n",
    "            right_mean = right_mos.mean()\n",
    "    return best_error, best_partition_index, left_mean, right_mean\n",
    "        \n",
    "\n",
    "def get_partition_error(left_mos, right_mos, metric='mse'):\n",
    "    if metric == 'mse':\n",
    "        n1, n2 = len(left_mos), len(right_mos)\n",
    "        left_mse = ((left_mos - left_mos.mean())**2).sum()\n",
    "        right_mse = ((right_mos - right_mos.mean())**2).sum()\n",
    "        return np.sqrt((left_mse + right_mse) / (n1 + n2))\n",
    "    else:\n",
    "        print('Unsupported error')\n",
    "        return 0\n",
    "\n",
    "\n",
    "def remove_outliers(f_1d, mos, n_std=2.0):\n",
    "    # f is a 1D feature\n",
    "    new_f_1d = []\n",
    "    new_mos = []\n",
    "    f_mean, f_std = f_1d.mean(), f_1d.std()\n",
    "    for i in range(len(mos)):\n",
    "        if np.abs(f_1d[i] - f_mean) <= n_std * f_std:\n",
    "            new_f_1d.append(f_1d[i])\n",
    "            new_mos.append(mos[i])\n",
    "    return np.array(new_f_1d), np.array(new_mos)\n",
    "\n",
    "## High-dimensional RFT\n",
    "\n",
    "def find_best_partition_ho(f_ho, mos, bins=32, metric='mse'):\n",
    "    if f_ho.shape[1] == 1:\n",
    "        f_1d = f_ho.reshape(-1)\n",
    "    else:\n",
    "        pca = PCA(n_components=1)\n",
    "        f_1d = pca.fit_transform(f_ho).reshape(-1)\n",
    "    f_1d, mos = remove_outliers(f_1d, mos)\n",
    "    best_error = float('inf')\n",
    "    best_partition_index = 0\n",
    "    left_mean, right_mean = 0, 0\n",
    "    f_min, f_max = f_1d.min(), f_1d.max()\n",
    "    bin_width = (f_max - f_min) / bins\n",
    "    for i in range(1, bins):\n",
    "        partition_point = f_min + i * bin_width\n",
    "        left_mos, right_mos = mos[f_1d <= partition_point], mos[f_1d > partition_point]\n",
    "        partition_error = get_partition_error(left_mos, right_mos, metric)\n",
    "        if partition_error < best_error:\n",
    "            best_error = partition_error\n",
    "            best_partition_index = i\n",
    "            left_mean = left_mos.mean()\n",
    "            right_mean = right_mos.mean()\n",
    "    return best_error, best_partition_index, left_mean, right_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1000, 20)\n"
     ]
    }
   ],
   "source": [
    "## Synthetic datasets: 1000 samples, 100 features; labels is uniform distributed in [1, 5]\n",
    "### train RFT\n",
    "X = np.random.randn(1000, 100)\n",
    "y = np.random.uniform(1, 5, 1000)\n",
    "\n",
    "dim_mse = dict()\n",
    "for d in range(X.shape[1]):\n",
    "    best_mse, _, _, _ = find_best_partition(X[:, d], y, bins=32)\n",
    "    dim_mse[d] = best_mse\n",
    "    \n",
    "sorted_mse = {k: v for k, v in sorted(dim_mse.items(), key=lambda item: item[1])}\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(np.arange(100), list(sorted_mse.values()))\n",
    "plt.xlabel('Rank')\n",
    "plt.ylabel('RMSE')\n",
    "plt.show()\n",
    "\n",
    "### Extract relevant features\n",
    "relevant_dimension = np.array(list(sorted_mse.keys()))[np.arange(20)]\n",
    "selected_X = X[:, relevant_dimension]\n",
    "print(selected_X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "bvqa",
   "language": "python",
   "name": "bvqa"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
